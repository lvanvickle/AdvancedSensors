from motor_func import move_forward, stop_motors
import time
import serial

ser = None

# Setup serial communication (similar to autonomous.py)
def setup_serial():
    global ser
    try:
        ser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)
        print("Connected to Arduino for Line Following")
    except serial.SerialException as e:
        print(f"Error: {e}")

# Read IR sensor data for line following, along with front and back distance
def read_sensors():
    if ser and ser.in_waiting > 0:
        try:
            data = ser.readline().decode().strip()
            sensor_data = data.split(',')
            front_distance = int(sensor_data[0])   # Front ultrasonic sensor
            back_distance = int(sensor_data[1])    # Back ultrasonic sensor
            ir_state = int(sensor_data[2])         # IR sensor (for line following)
            return front_distance, back_distance, ir_state
        except (ValueError, IndexError):
            return None, None, None
    return None, None, None

# Line following logic
def start_line_follow(get_mode):
    setup_serial()
    try:
        while True:
            mode = get_mode()
            if mode == "line_follow":
                front_distance, back_distance, ir_state = read_sensors()
                
                # Use front distance for obstacle avoidance while line following
                if front_distance is not None and front_distance < 20:
                    stop_motors()  # Stop if an obstacle is detected in front
                elif ir_state == 1:
                    move_forward(0.8)  # Follow the line
                else:
                    stop_motors()  # No line detected, stop
            time.sleep(0.1)

    except KeyboardInterrupt:
        stop_motors()
        print("Line Following interrupted")